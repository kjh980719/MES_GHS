<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mes.app.mapper.workplan.WorkPlanMapper">

    <select id="workPlanListTotal"  parameterType="HashMap" resultType="int">
       	SELECT
       	 	COUNT(*) 
       	from workplan A
       	inner join workplan_detail B on A.plan_code = B.plan_code
		inner join manager_list C on A.manager_seq = C.manager_seq
		inner join manager_auth_group D on C.auth_group_seq = D.auth_group_seq
       	WHERE B.no = 1  
       		AND A.DELETE_YN = 'N' 
			${sQuery}		
			<![CDATA[
				AND (A.STARTDATE >= #{startDate} and A.STARTDATE <= #{endDate} OR A.EndDate >= #{startDate} and A.ENDDATE <= #{endDate})
			]]>
	

    </select>
   
    
    
   <select id="workPlanList" parameterType="HashMap" resultType="Map">
		SELECT * FROM (
			SELECT 
				@ROWNUM := @ROWNUM+1 AS no,
				k.PLAN_CODE AS plan_code,
				convert(date_format(k.STARTDATE, '%Y-%m-%d'), char(10)) as startDate,
				convert(date_format(k.ENDDATE, '%Y-%m-%d'), char(10)) as endDate,
				k.PLANQTY AS planQty,
				(SELECT Convert_Location(K.PRODUCT_LINE,'L')) AS product_line,
				k.PLAN_STATUS AS plan_status,
			   	case k.cnt when 1 then k.pdt_name_one else  concat(k.pdt_name_one, ' 외', (k.cnt-1), '건') end AS pdt_name,
				k.MANAGER_NAME AS managerName,
				k.MANAGER_POSITION AS managerPosition,
				k.AUTH_GROUP_NAME AS groupName
			FROM
			    (
					select 					
						A.PLAN_CODE,
						A.STARTDATE,
						A.ENDDATE,
			  			A.PRODUCT_LINE,
			  			A.PLAN_STATUS,
						( SELECT SUM(F.PLANQTY) FROM workplan_detail F WHERE F.plan_code = A.plan_code)  as PLANQTY,
					 	B.pdt_name as pdt_name_one ,
	                    ( SELECT COUNT(*) FROM workplan_detail F WHERE F.plan_code = A.plan_code) AS cnt ,
	                    ( SELECT MAX(PDT_NAME) FROM workplan_detail F WHERE F.plan_code = A.plan_code) AS pdt,
						C.MANAGER_NAME,
			  			C.MANAGER_POSITION,
						D.AUTH_GROUP_NAME
					from workplan A 
						inner join workplan_detail B on A.plan_code = B.plan_code
						inner join manager_list C on A.manager_seq = C.manager_seq
						inner join manager_auth_group D on C.auth_group_seq = D.auth_group_seq
					 ,(SELECT @ROWNUM:=0) R
					where B.no = 1 
						AND A.DELETE_YN = 'N'
						${sQuery}
						<![CDATA[
							AND (A.STARTDATE >= #{startDate} and A.STARTDATE <= #{endDate} OR A.EndDate >= #{startDate} and A.ENDDATE <= #{endDate})
						]]>
						order by A.reg_date desc
			        ) k
			)sub
			WHERE sub.no  BETWEEN ((#{currentPage}-1) * #{rowsPerPage}) + 1 AND #{currentPage} * #{rowsPerPage}
	
    </select>
    
 	<select id="getMangerListTotal"  parameterType="HashMap" resultType="int">
       	SELECT
       	 	COUNT(*)
       	from manager_list A
			INNER JOIN manager_auth_group B on A.auth_group_seq = B.auth_group_seq
			INNER JOIN MES_DEPARTMENT D  ON B.AUTH_GROUP_NAME  = D.DPT_NAME
       	WHERE 
			${sQuery}
    </select>
   
    
    
   <select id="getMangerList" parameterType="HashMap" resultType="Map">
		SELECT * FROM (
			SELECT 
				@ROWNUM := @ROWNUM+1 AS no
 				,k.manager_name
 				,k.manager_position
 				,k.auth_group_name
 				,k.manager_seq 
			FROM
			    (
					select 					
 						IFNULL(A.manager_name,'') as manager_name
 					 	,IFNULL(A.manager_position,'') as manager_position
 					 	,IFNULL(B.auth_group_name,'') as auth_group_name
 					 	,IFNULL(A.manager_seq,'') as manager_seq
				from manager_list A
					INNER JOIN manager_auth_group B ON A.auth_group_seq = B.auth_group_seq
					INNER JOIN MES_DEPARTMENT D  ON B.AUTH_GROUP_NAME  = D.DPT_NAME
					,(SELECT @ROWNUM:=0) R
				where
						${sQuery}					
						order by A.REGIST_DATE asc
			        ) k
			)sub
			WHERE sub.no  BETWEEN ((#{currentPage}-1) * #{rowsPerPage}) + 1 AND #{currentPage} * #{rowsPerPage}
	
    </select>
    
   <select id="writeWorkPlanDetail" statementType="CALLABLE" parameterType="HashMap">
	    {
	    	call WorkPlan_Detail_Create_I1_Str
	    	(
			    #{seq},
			    #{plan_code},
	    	    #{pdt_cd},
			    #{pdt_code},
			    #{pdt_name},
			    #{pdt_standard},
			    #{planqty},
			    #{unit},
				#{serial_yn},
	    	    #{package_yn}
			)
			
	    }  	     
    </select>
    
    <select id="writeWorkPlan" statementType="CALLABLE" parameterType="HashMap" resultType="String">
	    {
	    	call WorkPlan_Create_I1_Str
	    	(
	    		#{manager_seq},
	    	    #{start_date},
	    	    #{end_date},
	    	    #{work_type},
	    	    #{iManagerSeq},
				#{product_line},
              	#{bigo}

	    	)
	    }

	</select>
	
   <select id="editWorkPlanDetail" statementType="CALLABLE" parameterType="HashMap">
	    {
	    	call WorkPlan_Detail_Update_U1_Str
	    	(
			    #{seq},
			    #{plan_code},
				#{pdt_cd},
			    #{pdt_code},
			    #{pdt_name},
			    #{pdt_standard},
			    #{planqty},
			    #{unit},
				#{serial_yn},
	    	    #{package_yn}
			)
			
	    }  	     
    </select>
    
    <select id="editWorkPlan" statementType="CALLABLE" parameterType="HashMap" resultType="String">
	    {
	    	call WorkPlan_Update_U1_Str
	    	(
	    		#{plan_code},#{manager_seq},#{start_date},#{end_date},#{work_type},#{iManagerSeq},#{bigo},#{product_line}
	    	)
	    }

	</select>
    
    
    <select id="view" parameterType="HashMap" resultType="HashMap">
			select 					
				A.PLAN_CODE AS plan_code,
				IFNULL(A.BIGO,'') as bigo,
				convert(date_format(A.STARTDATE, '%Y-%m-%d'), char(10)) as startDate,
				convert(date_format(A.ENDDATE, '%Y-%m-%d'), char(10)) as endDate,
			    A.PRODUCT_LINE AS product_line,
				A.WORK_TYPE AS work_type,
				A.PLAN_STATUS AS plan_status,
				IFNULL(C.MANAGER_NAME,'') AS managerName,
				IFNULL(D.AUTH_GROUP_NAME,'') AS groupName,
				IFNULL(A.MANAGER_SEQ,'') AS manager_seq,
				IFNULL(C.MANAGER_POSITION,'') AS manager_position,
				B.NO AS no,
				B.PDT_CD AS pdt_cd,
				B.PDT_CODE AS pdt_code,
				B.PDT_NAME AS pdt_name,
				IFNULL(B.PDT_STANDARD,'') as pdt_standard,
				IFNULL(B.UNIT,'') as unit,
				B.PLANQTY as planqty,
				B.REALQTY as realqty,
				TRIM(TEXT_SPLIT(B.SERIAL_CODE, '~' , 1)) as serial_from,
				TRIM(TEXT_SPLIT(B.SERIAL_CODE, '~' , 2)) as serial_to,
				B.SERIAL_YN AS serial_yn,
				B.PACKAGE_YN AS package_yn
      		from workplan A 
				inner join workplan_detail B on A.plan_code = B.plan_code
				inner join manager_list C on A.manager_seq = C.manager_seq
				inner join manager_auth_group D on C.auth_group_seq = D.auth_group_seq
			WHERE 
				A.PLAN_CODE = #{plan_code}	
				AND A.DELETE_YN = 'N'
    </select>

    <update id="delete" parameterType="hashMap">
    	UPDATE workplan
    		SET
    			DELETE_YN = 'Y'
    			,DELETE_DATE = now()
    			,DELETE_BY = #{iManagerSeq}
    		WHERE 
    			PLAN_CODE = #{plan_code}
    </update>

	<update id="finish" parameterType="hashMap">
		UPDATE workplan
		SET
		  PLAN_STATUS = 'WPS003'
		  ,MOD_DATE = now()
		  ,MOD_BY = #{iManagerSeq}
		WHERE
			PLAN_CODE = #{plan_code}
	</update>



	<select id="getSerialProductList" parameterType="HashMap" resultType="HashMap">
		select
		    A.NO AS no,
		    A.PDT_CD AS pdt_cd,
		    A.PDT_CODE AS pdt_code,
			A.PDT_NAME AS pdt_name,
			A.PACKAGE_YN AS package_yn,
			A.PLANQTY AS plan_qty
		from workplan_detail A
			inner join workplan B on A.plan_code = B.plan_code
		WHERE
			A.PLAN_CODE = #{plan_code}
			AND A.SERIAL_YN = 'Y'

	</select>

	<select id="getSerialList" statementType="CALLABLE" parameterType="HashMap" resultType="HashMap">
		{
			call Serial_S1_Str
			(
				#{plan_code},#{pdt_cd},#{package_yn}
			)
		}
	</select>


	<select id="manageSerial" statementType="CALLABLE" parameterType="HashMap" resultType="String">
		{
			call Serial_Create_I1_Str
			(
				#{serial_planCode},#{serial_package_yn},#{serial_real_pdt_cd},#{serial_plan_qty},#{serial_pallet_qty},#{serial_1},#{serial_2},#{iManagerSeq}
			)
		}
	</select>



</mapper>
